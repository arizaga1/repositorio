CCS PCH C Compiler, Version 5.091, 13314               24-may.-23 11:10

               Filename:   C:\Users\j_ari\Dropbox\Curso Primavera 2022\Uppuebla\Sistemas de computo\repositorio\serial_i2c\main.lst

               ROM used:   466 bytes (1%)
                           Largest free fragment is 32302
               RAM used:   11 (1%) at main() level
                           12 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

0000:  GOTO   016A
.................... #include <main.h>
.................... #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  DATA 53,75
0006:  DATA 65,6E
0008:  DATA 61,20
000A:  DATA 61,6C
000C:  DATA 61,72
000E:  DATA 6D,61
0010:  DATA 00,00
*
004A:  BTFSC  0B.7
004C:  BRA    006E
004E:  MOVLW  0F
0050:  MOVWF  00
0052:  SWAPF  0A,W
0054:  ANDWF  00,F
0056:  MOVLW  0A
0058:  SUBWF  00,W
005A:  BC    0062
005C:  MOVLW  30
005E:  ADDWF  00,F
0060:  BRA    0066
0062:  MOVF   0B,W
0064:  ADDWF  00,F
0066:  MOVF   00,W
0068:  BTFSS  F9E.4
006A:  BRA    0068
006C:  MOVWF  FAD
006E:  MOVLW  0F
0070:  ANDWF  0A,F
0072:  MOVLW  0A
0074:  SUBWF  0A,W
0076:  BC    007C
0078:  MOVLW  30
007A:  BRA    0080
007C:  BCF    0B.7
007E:  MOVF   0B,W
0080:  ADDWF  0A,F
0082:  MOVF   0A,W
0084:  BTFSS  F9E.4
0086:  BRA    0084
0088:  MOVWF  FAD
008A:  RETURN 0
*
0146:  TBLRD*+
0148:  MOVF   FF5,F
014A:  BZ    0166
014C:  MOVFF  FF6,0A
0150:  MOVFF  FF7,0B
0154:  MOVF   FF5,W
0156:  BTFSS  F9E.4
0158:  BRA    0156
015A:  MOVWF  FAD
015C:  MOVFF  0A,FF6
0160:  MOVFF  0B,FF7
0164:  BRA    0146
0166:  GOTO   01CE (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... 
.................... #use delay(crystal=4000000)
*
011C:  CLRF   FEA
011E:  MOVLW  0B
0120:  MOVWF  FE9
0122:  MOVF   FEF,W
0124:  BZ    0142
0126:  MOVLW  01
0128:  MOVWF  01
012A:  CLRF   00
012C:  DECFSZ 00,F
012E:  BRA    012C
0130:  DECFSZ 01,F
0132:  BRA    012A
0134:  MOVLW  4A
0136:  MOVWF  00
0138:  DECFSZ 00,F
013A:  BRA    0138
013C:  BRA    013E
013E:  DECFSZ FEF,F
0140:  BRA    0126
0142:  GOTO   01B4 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1)
.................... #use i2c(Master,Fast,sda=PIN_B0,scl=PIN_B1,force_hw)   //módulo serial del microcontrolador
*
0012:  BCF    FC6.7
0014:  BCF    F9E.3
0016:  MOVFF  0A,FC9
001A:  MOVLW  02
001C:  BTFSC  FC6.7
001E:  BRA    002A
0020:  BTFSS  F9E.3
0022:  BRA    0020
0024:  MOVLW  00
0026:  BTFSC  FC5.6
0028:  MOVLW  01
002A:  MOVWF  01
002C:  RETURN 0
002E:  BCF    FC6.6
0030:  BSF    FC5.3
0032:  BTFSC  FC5.3
0034:  BRA    0032
0036:  BTFSC  00.0
0038:  BCF    FC5.5
003A:  BTFSS  00.0
003C:  BSF    FC5.5
003E:  BSF    FC5.4
0040:  BTFSC  FC5.4
0042:  BRA    0040
0044:  MOVFF  FC9,01
0048:  RETURN 0
.................... 
.................... 
.................... BYTE direccion;    
.................... Byte segundos,minutos,horas;   //Variables para recibir la información de los minutos segundos y horas
.................... 
.................... void funcion1();   //declaracion de una funcion
.................... 
.................... void main()
*
016A:  CLRF   FF8
016C:  BCF    FD0.7
016E:  BCF    FB8.3
0170:  MOVLW  19
0172:  MOVWF  FAF
0174:  MOVLW  A6
0176:  MOVWF  FAC
0178:  MOVLW  90
017A:  MOVWF  FAB
017C:  BSF    F93.1
017E:  BSF    F93.0
0180:  MOVLW  02
0182:  MOVWF  FC8
0184:  MOVLW  28
0186:  MOVWF  FC6
0188:  BCF    FC7.7
018A:  BCF    FC7.6
018C:  CLRF   09
018E:  CLRF   08
0190:  MOVF   FC1,W
0192:  ANDLW  C0
0194:  IORLW  0F
0196:  MOVWF  FC1
0198:  MOVLW  07
019A:  MOVWF  FB4
.................... {
.................... direccion=0xD0;  //  dirección 1101  000  bit de escrituta 0 
019C:  MOVLW  D0
019E:  MOVWF  04
....................    setup_adc_ports(NO_ANALOGS, VSS_VDD);
01A0:  MOVF   FC1,W
01A2:  ANDLW  C0
01A4:  IORLW  0F
01A6:  MOVWF  FC1
....................      
.................... 
....................    while(TRUE)
....................    {
.................... 
.................... 
.................... funcion1();  //llamada a la función
01A8:  BRA    008C
.................... 
.................... // Issues a stop command when in the I2C master mode
.................... delay_ms(1000);
01AA:  MOVLW  04
01AC:  MOVWF  0A
01AE:  MOVLW  FA
01B0:  MOVWF  0B
01B2:  BRA    011C
01B4:  DECFSZ 0A,F
01B6:  BRA    01AE
.................... 
.................... if(minutos==0x49 && horas==0x16)
01B8:  MOVF   06,W
01BA:  SUBLW  49
01BC:  BNZ   01CE
01BE:  MOVF   07,W
01C0:  SUBLW  16
01C2:  BNZ   01CE
....................    {printf("Suena alarma");}
01C4:  MOVLW  04
01C6:  MOVWF  FF6
01C8:  MOVLW  00
01CA:  MOVWF  FF7
01CC:  BRA    0146
01CE:  BRA    01A8
....................       //TODO: User Code
....................    }
.................... 
.................... }
.................... 
01D0:  SLEEP 
.................... 
.................... 
.................... //un programa modular
.................... 
.................... void funcion1()
.................... {
.................... i2c_start();                                 // Issues a start command when in
*
008C:  BSF    FC5.0
008E:  BTFSC  FC5.0
0090:  BRA    008E
.................... i2c_write(0xD0);                             // Sends a single byte over the I2C interface.
0092:  MOVLW  D0
0094:  MOVWF  0A
0096:  RCALL  0012
.................... i2c_write(0x00); 
0098:  CLRF   0A
009A:  RCALL  0012
.................... i2c_start();
009C:  BSF    FC5.1
009E:  BTFSC  FC5.1
00A0:  BRA    009E
.................... i2c_write(0xD0|0x01);
00A2:  MOVLW  D1
00A4:  MOVWF  0A
00A6:  RCALL  0012
.................... segundos=i2c_read(1);
00A8:  MOVLW  01
00AA:  MOVWF  00
00AC:  RCALL  002E
00AE:  MOVFF  01,05
.................... minutos=i2c_read(1);
00B2:  MOVLW  01
00B4:  MOVWF  00
00B6:  RCALL  002E
00B8:  MOVFF  01,06
.................... horas=i2c_read(0);
00BC:  CLRF   00
00BE:  RCALL  002E
00C0:  MOVFF  01,07
.................... i2c_stop();    
00C4:  BSF    FC5.2
00C6:  BTFSC  FC5.2
00C8:  BRA    00C6
.................... printf("\r");
00CA:  MOVLW  0D
00CC:  BTFSS  F9E.4
00CE:  BRA    00CC
00D0:  MOVWF  FAD
.................... printf("%x: %x :%x ",horas,minutos,segundos);
00D2:  MOVFF  07,0A
00D6:  MOVLW  57
00D8:  MOVWF  0B
00DA:  RCALL  004A
00DC:  MOVLW  3A
00DE:  BTFSS  F9E.4
00E0:  BRA    00DE
00E2:  MOVWF  FAD
00E4:  MOVLW  20
00E6:  BTFSS  F9E.4
00E8:  BRA    00E6
00EA:  MOVWF  FAD
00EC:  MOVFF  06,0A
00F0:  MOVLW  57
00F2:  MOVWF  0B
00F4:  RCALL  004A
00F6:  MOVLW  20
00F8:  BTFSS  F9E.4
00FA:  BRA    00F8
00FC:  MOVWF  FAD
00FE:  MOVLW  3A
0100:  BTFSS  F9E.4
0102:  BRA    0100
0104:  MOVWF  FAD
0106:  MOVFF  05,0A
010A:  MOVLW  57
010C:  MOVWF  0B
010E:  RCALL  004A
0110:  MOVLW  20
0112:  BTFSS  F9E.4
0114:  BRA    0112
0116:  MOVWF  FAD
0118:  GOTO   01AA (RETURN)
.................... 
.................... }

Configuration Fuses:
   Word  1: C000   PLL1 CPUDIV1 NOUSBDIV XT FCMEN IESO
   Word  2: 1E26   PUT BROWNOUT VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
