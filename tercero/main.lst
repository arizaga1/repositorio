CCS PCM C Compiler, Version 5.091, 13314               12-feb.-25 13:20

               Filename:   C:\Users\Equipo33\Dropbox\Curso Verano 2022\UPPuebla\Sistemas de computo\repositorio\tercero\main.lst

               ROM used:   545 words (7%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           33 (9%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1EC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
005C:  DATA F3,32
005D:  DATA 67,1D
005E:  DATA BD,12
005F:  DATA 75,00
*
011B:  MOVF   31,W
011C:  CLRF   78
011D:  SUBWF  30,W
011E:  BTFSC  03.0
011F:  GOTO   123
0120:  MOVF   30,W
0121:  MOVWF  77
0122:  GOTO   12F
0123:  CLRF   77
0124:  MOVLW  08
0125:  MOVWF  32
0126:  RLF    30,F
0127:  RLF    77,F
0128:  MOVF   31,W
0129:  SUBWF  77,W
012A:  BTFSC  03.0
012B:  MOVWF  77
012C:  RLF    78,F
012D:  DECFSZ 32,F
012E:  GOTO   126
012F:  RETURN
*
015C:  MOVF   0B,W
015D:  MOVWF  2F
015E:  BCF    0B.7
015F:  BSF    03.5
0160:  BSF    03.6
0161:  BSF    0C.7
0162:  BSF    0C.0
0163:  NOP
0164:  NOP
0165:  BCF    03.5
0166:  BCF    03.6
0167:  BTFSC  2F.7
0168:  BSF    0B.7
0169:  BTFSC  03.0
016A:  GOTO   193
016B:  BSF    03.6
016C:  MOVF   0C,W
016D:  ANDLW  7F
016E:  BCF    03.6
016F:  MOVWF  2F
0170:  BSF    03.6
0171:  MOVF   0D,W
0172:  BCF    03.6
0173:  MOVWF  30
0174:  BSF    03.6
0175:  MOVF   0F,W
0176:  BCF    03.6
0177:  MOVWF  31
0178:  MOVF   2F,W
0179:  MOVWF  32
017A:  CALL   130
017B:  MOVF   30,W
017C:  BSF    03.6
017D:  MOVWF  0D
017E:  BCF    03.6
017F:  MOVF   31,W
0180:  BSF    03.6
0181:  MOVWF  0F
0182:  BCF    03.6
0183:  MOVF   0B,W
0184:  MOVWF  32
0185:  BCF    0B.7
0186:  BSF    03.5
0187:  BSF    03.6
0188:  BSF    0C.7
0189:  BSF    0C.0
018A:  NOP
018B:  NOP
018C:  BCF    03.5
018D:  BCF    03.6
018E:  BTFSC  32.7
018F:  BSF    0B.7
0190:  DECFSZ 2E,F
0191:  GOTO   193
0192:  GOTO   1B2
0193:  BSF    03.6
0194:  RLF    0C,W
0195:  RLF    0E,W
0196:  ANDLW  7F
0197:  BCF    03.6
0198:  MOVWF  2F
0199:  BSF    03.6
019A:  MOVF   0D,W
019B:  BCF    03.6
019C:  MOVWF  30
019D:  BSF    03.6
019E:  MOVF   0F,W
019F:  BCF    03.6
01A0:  MOVWF  31
01A1:  MOVF   2F,W
01A2:  MOVWF  32
01A3:  CALL   130
01A4:  MOVF   30,W
01A5:  BSF    03.6
01A6:  MOVWF  0D
01A7:  BCF    03.6
01A8:  MOVF   31,W
01A9:  BSF    03.6
01AA:  MOVWF  0F
01AB:  INCF   0D,F
01AC:  BTFSC  03.2
01AD:  INCF   0F,F
01AE:  BCF    03.0
01AF:  BCF    03.6
01B0:  DECFSZ 2E,F
01B1:  GOTO   15C
01B2:  BCF    0A.3
01B3:  BCF    0A.4
01B4:  GOTO   21A (RETURN)
01B5:  MOVF   78,W
01B6:  MOVF   2E,W
01B7:  MOVWF  30
01B8:  MOVLW  64
01B9:  MOVWF  31
01BA:  CALL   11B
01BB:  MOVF   77,W
01BC:  MOVWF  2E
01BD:  MOVF   78,W
01BE:  MOVLW  30
01BF:  BTFSS  03.2
01C0:  GOTO   1C8
01C1:  BTFSS  2F.1
01C2:  GOTO   1CF
01C3:  BTFSC  2F.3
01C4:  GOTO   1CF
01C5:  BTFSC  2F.4
01C6:  MOVLW  20
01C7:  GOTO   1CB
01C8:  BCF    2F.3
01C9:  BCF    2F.4
01CA:  BSF    2F.0
01CB:  ADDWF  78,F
01CC:  MOVF   78,W
01CD:  MOVWF  32
01CE:  CALL   130
01CF:  MOVF   2E,W
01D0:  MOVWF  30
01D1:  MOVLW  0A
01D2:  MOVWF  31
01D3:  CALL   11B
01D4:  MOVF   77,W
01D5:  MOVWF  2E
01D6:  MOVF   78,W
01D7:  MOVLW  30
01D8:  BTFSS  03.2
01D9:  GOTO   1E0
01DA:  BTFSC  2F.3
01DB:  GOTO   1E4
01DC:  BTFSS  2F.0
01DD:  GOTO   1E4
01DE:  BTFSC  2F.4
01DF:  MOVLW  20
01E0:  ADDWF  78,F
01E1:  MOVF   78,W
01E2:  MOVWF  32
01E3:  CALL   130
01E4:  MOVLW  30
01E5:  ADDWF  2E,F
01E6:  MOVF   2E,W
01E7:  MOVWF  32
01E8:  CALL   130
01E9:  BCF    0A.3
01EA:  BCF    0A.4
01EB:  GOTO   21F (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20MHz)
*
0060:  MOVLW  33
0061:  MOVWF  04
0062:  BCF    03.7
0063:  MOVF   00,W
0064:  BTFSC  03.2
0065:  GOTO   073
0066:  MOVLW  06
0067:  MOVWF  78
0068:  CLRF   77
0069:  DECFSZ 77,F
006A:  GOTO   069
006B:  DECFSZ 78,F
006C:  GOTO   068
006D:  MOVLW  7B
006E:  MOVWF  77
006F:  DECFSZ 77,F
0070:  GOTO   06F
0071:  DECFSZ 00,F
0072:  GOTO   066
0073:  RETURN
.................... 
.................... 
.................... int8 cuenta=76;
.................... int8 segundos;
.................... #INT_RTCC   //interrupcion por Tmr0 
.................... void  RTCC_isr(void) //RSI Rutina de Servicio a la Interrupción  
....................                      //ISR Interrupt Service Routin
.................... {
.................... cuenta--;
*
004F:  DECF   2B,F
.................... set_timer0(2);//cargando un valor al tmr0
0050:  MOVLW  02
0051:  MOVWF  01
.................... if (cuenta == 0){
0052:  MOVF   2B,F
0053:  BTFSS  03.2
0054:  GOTO   058
.................... cuenta=76; 
0055:  MOVLW  4C
0056:  MOVWF  2B
.................... 
.................... segundos++;
0057:  INCF   2C,F
.................... 
.................... 
.................... }
.................... 
.................... }
....................  
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
0058:  BCF    0B.2
0059:  BCF    0A.3
005A:  BCF    0A.4
005B:  GOTO   02B
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
008F:  MOVLW  0F
0090:  BSF    03.5
0091:  ANDWF  08,W
0092:  IORLW  F0
0093:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0094:  BCF    03.5
0095:  BSF    08.2
....................    delay_cycles(1);
0096:  NOP
....................    lcd_output_enable(1);
0097:  BSF    08.0
....................    delay_cycles(1);
0098:  NOP
....................    high = lcd_read_nibble();
0099:  CALL   083
009A:  MOVF   78,W
009B:  MOVWF  3A
....................       
....................    lcd_output_enable(0);
009C:  BCF    08.0
....................    delay_cycles(1);
009D:  NOP
....................    lcd_output_enable(1);
009E:  BSF    08.0
....................    delay_us(1);
009F:  GOTO   0A0
00A0:  GOTO   0A1
00A1:  NOP
....................    low = lcd_read_nibble();
00A2:  CALL   083
00A3:  MOVF   78,W
00A4:  MOVWF  39
....................       
....................    lcd_output_enable(0);
00A5:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00A6:  MOVLW  0F
00A7:  BSF    03.5
00A8:  ANDWF  08,W
00A9:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00AA:  BCF    03.5
00AB:  SWAPF  3A,W
00AC:  MOVWF  77
00AD:  MOVLW  F0
00AE:  ANDWF  77,F
00AF:  MOVF   77,W
00B0:  IORWF  39,W
00B1:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0083:  MOVF   08,W
0084:  MOVWF  77
0085:  SWAPF  08,W
0086:  ANDLW  0F
0087:  MOVWF  78
....................   #endif
0088:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0074:  SWAPF  3A,W
0075:  ANDLW  F0
0076:  MOVWF  77
0077:  MOVLW  0F
0078:  ANDWF  08,W
0079:  IORWF  77,W
007A:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
007B:  NOP
....................    lcd_output_enable(1);
007C:  BSF    08.0
....................    delay_us(2);
007D:  MOVLW  03
007E:  MOVWF  77
007F:  DECFSZ 77,F
0080:  GOTO   07F
....................    lcd_output_enable(0);
0081:  BCF    08.0
0082:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0089:  BSF    03.5
008A:  BCF    08.0
....................    lcd_rs_tris();
008B:  BCF    08.1
....................    lcd_rw_tris();
008C:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
008D:  BCF    03.5
008E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00B2:  MOVF   78,W
00B3:  MOVWF  39
00B4:  BTFSC  39.7
00B5:  GOTO   08F
....................    lcd_output_rs(address);
00B6:  BTFSS  37.0
00B7:  BCF    08.1
00B8:  BTFSC  37.0
00B9:  BSF    08.1
....................    delay_cycles(1);
00BA:  NOP
....................    lcd_output_rw(0);
00BB:  BCF    08.2
....................    delay_cycles(1);
00BC:  NOP
....................    lcd_output_enable(0);
00BD:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
00BE:  SWAPF  38,W
00BF:  MOVWF  39
00C0:  MOVLW  0F
00C1:  ANDWF  39,F
00C2:  MOVF   39,W
00C3:  MOVWF  3A
00C4:  CALL   074
....................    lcd_send_nibble(n & 0xf);
00C5:  MOVF   38,W
00C6:  ANDLW  0F
00C7:  MOVWF  39
00C8:  MOVWF  3A
00C9:  CALL   074
00CA:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00CB:  MOVLW  28
00CC:  MOVWF  2E
00CD:  MOVLW  0C
00CE:  MOVWF  2F
00CF:  MOVLW  01
00D0:  MOVWF  30
00D1:  MOVLW  06
00D2:  MOVWF  31
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00D3:  BCF    08.0
....................    lcd_output_rs(0);
00D4:  BCF    08.1
....................    lcd_output_rw(0);
00D5:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00D6:  MOVLW  0F
00D7:  BSF    03.5
00D8:  ANDWF  08,W
00D9:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
00DA:  BCF    08.0
....................    lcd_rs_tris();
00DB:  BCF    08.1
....................    lcd_rw_tris();
00DC:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
00DD:  MOVLW  0F
00DE:  BCF    03.5
00DF:  MOVWF  33
00E0:  CALL   060
....................    for(i=1;i<=3;++i)
00E1:  MOVLW  01
00E2:  MOVWF  2D
00E3:  MOVF   2D,W
00E4:  SUBLW  03
00E5:  BTFSS  03.0
00E6:  GOTO   0EF
....................    {
....................        lcd_send_nibble(3);
00E7:  MOVLW  03
00E8:  MOVWF  3A
00E9:  CALL   074
....................        delay_ms(5);
00EA:  MOVLW  05
00EB:  MOVWF  33
00EC:  CALL   060
00ED:  INCF   2D,F
00EE:  GOTO   0E3
....................    }
....................    
....................    lcd_send_nibble(2);
00EF:  MOVLW  02
00F0:  MOVWF  3A
00F1:  CALL   074
....................    delay_ms(5);
00F2:  MOVLW  05
00F3:  MOVWF  33
00F4:  CALL   060
....................    for(i=0;i<=3;++i)
00F5:  CLRF   2D
00F6:  MOVF   2D,W
00F7:  SUBLW  03
00F8:  BTFSS  03.0
00F9:  GOTO   106
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00FA:  MOVLW  2E
00FB:  ADDWF  2D,W
00FC:  MOVWF  04
00FD:  BCF    03.7
00FE:  MOVF   00,W
00FF:  MOVWF  32
0100:  CLRF   37
0101:  MOVF   32,W
0102:  MOVWF  38
0103:  CALL   089
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0104:  INCF   2D,F
0105:  GOTO   0F6
0106:  BCF    0A.3
0107:  BCF    0A.4
0108:  GOTO   204 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0109:  DECFSZ 34,W
010A:  GOTO   10C
010B:  GOTO   10F
....................       address=LCD_LINE_TWO;
010C:  MOVLW  40
010D:  MOVWF  35
010E:  GOTO   110
....................    else
....................       address=0;
010F:  CLRF   35
....................      
....................    address+=x-1;
0110:  MOVLW  01
0111:  SUBWF  33,W
0112:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address);
0113:  MOVF   35,W
0114:  IORLW  80
0115:  MOVWF  36
0116:  CLRF   37
0117:  MOVF   36,W
0118:  MOVWF  38
0119:  CALL   089
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
011A:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
0130:  MOVF   32,W
0131:  XORLW  07
0132:  BTFSC  03.2
0133:  GOTO   13E
0134:  XORLW  0B
0135:  BTFSC  03.2
0136:  GOTO   143
0137:  XORLW  06
0138:  BTFSC  03.2
0139:  GOTO   14B
013A:  XORLW  02
013B:  BTFSC  03.2
013C:  GOTO   151
013D:  GOTO   156
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
013E:  MOVLW  01
013F:  MOVWF  33
0140:  MOVWF  34
0141:  CALL   109
0142:  GOTO   15B
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0143:  CLRF   37
0144:  MOVLW  01
0145:  MOVWF  38
0146:  CALL   089
....................                      delay_ms(2);
0147:  MOVLW  02
0148:  MOVWF  33
0149:  CALL   060
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
014A:  GOTO   15B
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
014B:  MOVLW  01
014C:  MOVWF  33
014D:  MOVLW  02
014E:  MOVWF  34
014F:  CALL   109
0150:  GOTO   15B
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0151:  CLRF   37
0152:  MOVLW  10
0153:  MOVWF  38
0154:  CALL   089
0155:  GOTO   15B
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0156:  MOVLW  01
0157:  MOVWF  37
0158:  MOVF   32,W
0159:  MOVWF  38
015A:  CALL   089
....................      #endif
....................    }
015B:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... void main()
*
01EC:  MOVF   03,W
01ED:  ANDLW  1F
01EE:  MOVWF  03
01EF:  MOVLW  4C
01F0:  MOVWF  2B
01F1:  BSF    03.5
01F2:  BSF    1F.0
01F3:  BSF    1F.1
01F4:  BSF    1F.2
01F5:  BCF    1F.3
01F6:  MOVLW  07
01F7:  MOVWF  1C
01F8:  BCF    03.7
.................... {
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);      //13.1 ms overflow
01F9:  MOVF   01,W
01FA:  ANDLW  C0
01FB:  IORLW  07
01FC:  MOVWF  01
....................   SET_RTCC(2);
01FD:  MOVLW  02
01FE:  BCF    03.5
01FF:  MOVWF  01
....................    
....................    enable_interrupts(INT_TIMER0); //habilitar interrupcion de timer0
0200:  BSF    0B.5
....................    enable_interrupts(GLOBAL); //habilitacion general de las interrupc
0201:  MOVLW  C0
0202:  IORWF  0B,F
.................... 
....................    lcd_init();
0203:  GOTO   0CB
.................... 
....................    while(TRUE)
....................    {
....................    
....................    lcd_gotoxy(3, 2);
0204:  MOVLW  03
0205:  MOVWF  33
0206:  MOVLW  02
0207:  MOVWF  34
0208:  CALL   109
.................... printf(lcd_putc, "seg:=%u",segundos%60);
0209:  MOVF   2C,W
020A:  MOVWF  30
020B:  MOVLW  3C
020C:  MOVWF  31
020D:  CALL   11B
020E:  MOVF   77,W
020F:  MOVWF  2D
0210:  MOVLW  5C
0211:  BSF    03.6
0212:  MOVWF  0D
0213:  MOVLW  00
0214:  MOVWF  0F
0215:  BCF    03.0
0216:  MOVLW  05
0217:  BCF    03.6
0218:  MOVWF  2E
0219:  GOTO   15C
021A:  MOVF   2D,W
021B:  MOVWF  2E
021C:  MOVLW  1B
021D:  MOVWF  2F
021E:  GOTO   1B5
021F:  GOTO   204
....................    
....................       //TODO: User Code
....................    }
.................... 
.................... }
0220:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
