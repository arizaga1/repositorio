CCS PCM C Compiler, Version 5.091, 13314               28-ago.-24 16:23

               Filename:   C:\Users\Equipo33\Dropbox\Curso Verano 2022\UPPuebla\Sistemas de computo\repositorio\Convertidor_ADC\main.lst

               ROM used:   1108 words (14%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           35 (10%) worst case
               Stack used: 4 locations
               Stack size: 8

0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3D9
0003:  NOP
.................... #include <main.h>
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA A0,06
0005:  DATA 20,3B
0006:  DATA 6F,36
0007:  DATA F4,30
0008:  DATA EA,32
0009:  DATA BD,12
000A:  DATA 66,10
000B:  DATA 00,00
*
00B1:  MOVLW  8E
00B2:  MOVWF  77
00B3:  MOVF   27,W
00B4:  MOVWF  78
00B5:  MOVF   26,W
00B6:  MOVWF  79
00B7:  CLRF   7A
00B8:  MOVF   78,F
00B9:  BTFSS  03.2
00BA:  GOTO   0C5
00BB:  MOVF   79,W
00BC:  MOVWF  78
00BD:  CLRF   79
00BE:  MOVLW  08
00BF:  SUBWF  77,F
00C0:  MOVF   78,F
00C1:  BTFSS  03.2
00C2:  GOTO   0C5
00C3:  CLRF   77
00C4:  GOTO   0CD
00C5:  BCF    03.0
00C6:  BTFSC  78.7
00C7:  GOTO   0CC
00C8:  RLF    79,F
00C9:  RLF    78,F
00CA:  DECF   77,F
00CB:  GOTO   0C5
00CC:  BCF    78.7
00CD:  BCF    0A.3
00CE:  BCF    0A.4
00CF:  GOTO   406 (RETURN)
00D0:  MOVF   31,W
00D1:  BTFSC  03.2
00D2:  GOTO   140
00D3:  MOVWF  39
00D4:  MOVF   35,W
00D5:  BTFSC  03.2
00D6:  GOTO   140
00D7:  ADDWF  39,F
00D8:  BTFSC  03.0
00D9:  GOTO   0E1
00DA:  MOVLW  7F
00DB:  SUBWF  39,F
00DC:  BTFSS  03.0
00DD:  GOTO   140
00DE:  BTFSC  03.2
00DF:  GOTO   140
00E0:  GOTO   0E5
00E1:  MOVLW  81
00E2:  ADDWF  39,F
00E3:  BTFSC  03.0
00E4:  GOTO   140
00E5:  MOVF   39,W
00E6:  MOVWF  77
00E7:  CLRF   78
00E8:  CLRF   79
00E9:  CLRF   7A
00EA:  MOVF   32,W
00EB:  MOVWF  3D
00EC:  BSF    3D.7
00ED:  MOVF   33,W
00EE:  MOVWF  3C
00EF:  MOVF   34,W
00F0:  MOVWF  3B
00F1:  MOVLW  18
00F2:  MOVWF  39
00F3:  CLRF   3A
00F4:  BTFSS  3B.0
00F5:  GOTO   10E
00F6:  MOVF   38,W
00F7:  ADDWF  7A,F
00F8:  BTFSS  03.0
00F9:  GOTO   100
00FA:  INCF   79,F
00FB:  BTFSS  03.2
00FC:  GOTO   100
00FD:  INCF   78,F
00FE:  BTFSC  03.2
00FF:  BSF    3A.7
0100:  MOVF   37,W
0101:  ADDWF  79,F
0102:  BTFSS  03.0
0103:  GOTO   107
0104:  INCF   78,F
0105:  BTFSC  03.2
0106:  BSF    3A.7
0107:  MOVF   36,W
0108:  MOVWF  33
0109:  BSF    33.7
010A:  MOVF   33,W
010B:  ADDWF  78,F
010C:  BTFSC  03.0
010D:  BSF    3A.7
010E:  RLF    3A,F
010F:  RRF    78,F
0110:  RRF    79,F
0111:  RRF    7A,F
0112:  RRF    3D,F
0113:  RRF    3C,F
0114:  RRF    3B,F
0115:  BCF    03.0
0116:  DECFSZ 39,F
0117:  GOTO   0F3
0118:  MOVLW  01
0119:  ADDWF  77,F
011A:  BTFSC  03.0
011B:  GOTO   140
011C:  BTFSC  78.7
011D:  GOTO   125
011E:  RLF    3D,F
011F:  RLF    7A,F
0120:  RLF    79,F
0121:  RLF    78,F
0122:  DECF   77,F
0123:  BTFSC  03.2
0124:  GOTO   140
0125:  BTFSS  3D.7
0126:  GOTO   136
0127:  INCF   7A,F
0128:  BTFSS  03.2
0129:  GOTO   136
012A:  INCF   79,F
012B:  BTFSS  03.2
012C:  GOTO   136
012D:  INCF   78,F
012E:  BTFSS  03.2
012F:  GOTO   136
0130:  RRF    78,F
0131:  RRF    79,F
0132:  RRF    7A,F
0133:  INCF   77,F
0134:  BTFSC  03.2
0135:  GOTO   140
0136:  MOVF   32,W
0137:  MOVWF  3A
0138:  MOVF   36,W
0139:  XORWF  3A,F
013A:  BTFSS  3A.7
013B:  GOTO   13E
013C:  BSF    78.7
013D:  GOTO   144
013E:  BCF    78.7
013F:  GOTO   144
0140:  CLRF   77
0141:  CLRF   78
0142:  CLRF   79
0143:  CLRF   7A
0144:  RETURN
0145:  MOVF   28,W
0146:  BTFSC  03.2
0147:  GOTO   20A
0148:  MOVWF  34
0149:  MOVF   2C,W
014A:  BTFSC  03.2
014B:  GOTO   20A
014C:  SUBWF  34,F
014D:  BTFSS  03.0
014E:  GOTO   154
014F:  MOVLW  7F
0150:  ADDWF  34,F
0151:  BTFSC  03.0
0152:  GOTO   20A
0153:  GOTO   15A
0154:  MOVLW  81
0155:  SUBWF  34,F
0156:  BTFSS  03.0
0157:  GOTO   20A
0158:  BTFSC  03.2
0159:  GOTO   20A
015A:  MOVF   34,W
015B:  MOVWF  77
015C:  CLRF   78
015D:  CLRF   79
015E:  CLRF   7A
015F:  CLRF   33
0160:  MOVF   29,W
0161:  MOVWF  32
0162:  BSF    32.7
0163:  MOVF   2A,W
0164:  MOVWF  31
0165:  MOVF   2B,W
0166:  MOVWF  30
0167:  MOVLW  19
0168:  MOVWF  34
0169:  MOVF   2F,W
016A:  SUBWF  30,F
016B:  BTFSC  03.0
016C:  GOTO   17D
016D:  MOVLW  01
016E:  SUBWF  31,F
016F:  BTFSC  03.0
0170:  GOTO   17D
0171:  SUBWF  32,F
0172:  BTFSC  03.0
0173:  GOTO   17D
0174:  SUBWF  33,F
0175:  BTFSC  03.0
0176:  GOTO   17D
0177:  INCF   33,F
0178:  INCF   32,F
0179:  INCF   31,F
017A:  MOVF   2F,W
017B:  ADDWF  30,F
017C:  GOTO   1AF
017D:  MOVF   2E,W
017E:  SUBWF  31,F
017F:  BTFSC  03.0
0180:  GOTO   198
0181:  MOVLW  01
0182:  SUBWF  32,F
0183:  BTFSC  03.0
0184:  GOTO   198
0185:  SUBWF  33,F
0186:  BTFSC  03.0
0187:  GOTO   198
0188:  INCF   33,F
0189:  INCF   32,F
018A:  MOVF   2E,W
018B:  ADDWF  31,F
018C:  MOVF   2F,W
018D:  ADDWF  30,F
018E:  BTFSS  03.0
018F:  GOTO   1AF
0190:  INCF   31,F
0191:  BTFSS  03.2
0192:  GOTO   1AF
0193:  INCF   32,F
0194:  BTFSS  03.2
0195:  GOTO   1AF
0196:  INCF   33,F
0197:  GOTO   1AF
0198:  MOVF   2D,W
0199:  IORLW  80
019A:  SUBWF  32,F
019B:  BTFSC  03.0
019C:  GOTO   1AE
019D:  MOVLW  01
019E:  SUBWF  33,F
019F:  BTFSC  03.0
01A0:  GOTO   1AE
01A1:  INCF   33,F
01A2:  MOVF   2D,W
01A3:  IORLW  80
01A4:  ADDWF  32,F
01A5:  MOVF   2E,W
01A6:  ADDWF  31,F
01A7:  BTFSS  03.0
01A8:  GOTO   18C
01A9:  INCF   32,F
01AA:  BTFSS  03.2
01AB:  GOTO   18C
01AC:  INCF   33,F
01AD:  GOTO   18C
01AE:  BSF    7A.0
01AF:  DECFSZ 34,F
01B0:  GOTO   1B2
01B1:  GOTO   1BD
01B2:  BCF    03.0
01B3:  RLF    30,F
01B4:  RLF    31,F
01B5:  RLF    32,F
01B6:  RLF    33,F
01B7:  BCF    03.0
01B8:  RLF    7A,F
01B9:  RLF    79,F
01BA:  RLF    78,F
01BB:  RLF    35,F
01BC:  GOTO   169
01BD:  BTFSS  35.0
01BE:  GOTO   1C5
01BF:  BCF    03.0
01C0:  RRF    78,F
01C1:  RRF    79,F
01C2:  RRF    7A,F
01C3:  RRF    35,F
01C4:  GOTO   1C8
01C5:  DECF   77,F
01C6:  BTFSC  03.2
01C7:  GOTO   20A
01C8:  BTFSC  35.7
01C9:  GOTO   1F1
01CA:  BCF    03.0
01CB:  RLF    30,F
01CC:  RLF    31,F
01CD:  RLF    32,F
01CE:  RLF    33,F
01CF:  MOVF   2F,W
01D0:  SUBWF  30,F
01D1:  BTFSC  03.0
01D2:  GOTO   1DD
01D3:  MOVLW  01
01D4:  SUBWF  31,F
01D5:  BTFSC  03.0
01D6:  GOTO   1DD
01D7:  SUBWF  32,F
01D8:  BTFSC  03.0
01D9:  GOTO   1DD
01DA:  SUBWF  33,F
01DB:  BTFSS  03.0
01DC:  GOTO   200
01DD:  MOVF   2E,W
01DE:  SUBWF  31,F
01DF:  BTFSC  03.0
01E0:  GOTO   1E8
01E1:  MOVLW  01
01E2:  SUBWF  32,F
01E3:  BTFSC  03.0
01E4:  GOTO   1E8
01E5:  SUBWF  33,F
01E6:  BTFSS  03.0
01E7:  GOTO   200
01E8:  MOVF   2D,W
01E9:  IORLW  80
01EA:  SUBWF  32,F
01EB:  BTFSC  03.0
01EC:  GOTO   1F1
01ED:  MOVLW  01
01EE:  SUBWF  33,F
01EF:  BTFSS  03.0
01F0:  GOTO   200
01F1:  INCF   7A,F
01F2:  BTFSS  03.2
01F3:  GOTO   200
01F4:  INCF   79,F
01F5:  BTFSS  03.2
01F6:  GOTO   200
01F7:  INCF   78,F
01F8:  BTFSS  03.2
01F9:  GOTO   200
01FA:  INCF   77,F
01FB:  BTFSC  03.2
01FC:  GOTO   20A
01FD:  RRF    78,F
01FE:  RRF    79,F
01FF:  RRF    7A,F
0200:  MOVF   29,W
0201:  MOVWF  34
0202:  MOVF   2D,W
0203:  XORWF  34,F
0204:  BTFSS  34.7
0205:  GOTO   208
0206:  BSF    78.7
0207:  GOTO   20E
0208:  BCF    78.7
0209:  GOTO   20E
020A:  CLRF   77
020B:  CLRF   78
020C:  CLRF   79
020D:  CLRF   7A
020E:  BCF    0A.3
020F:  BCF    0A.4
0210:  GOTO   42C (RETURN)
*
024F:  MOVF   0B,W
0250:  MOVWF  25
0251:  BCF    0B.7
0252:  BSF    03.5
0253:  BSF    03.6
0254:  BSF    0C.7
0255:  BSF    0C.0
0256:  NOP
0257:  NOP
0258:  BCF    03.5
0259:  BCF    03.6
025A:  BTFSC  25.7
025B:  BSF    0B.7
025C:  BTFSC  03.0
025D:  GOTO   286
025E:  BSF    03.6
025F:  MOVF   0C,W
0260:  ANDLW  7F
0261:  BCF    03.6
0262:  MOVWF  25
0263:  BSF    03.6
0264:  MOVF   0D,W
0265:  BCF    03.6
0266:  MOVWF  26
0267:  BSF    03.6
0268:  MOVF   0F,W
0269:  BCF    03.6
026A:  MOVWF  27
026B:  MOVF   25,W
026C:  MOVWF  31
026D:  CALL   223
026E:  MOVF   26,W
026F:  BSF    03.6
0270:  MOVWF  0D
0271:  BCF    03.6
0272:  MOVF   27,W
0273:  BSF    03.6
0274:  MOVWF  0F
0275:  BCF    03.6
0276:  MOVF   0B,W
0277:  MOVWF  28
0278:  BCF    0B.7
0279:  BSF    03.5
027A:  BSF    03.6
027B:  BSF    0C.7
027C:  BSF    0C.0
027D:  NOP
027E:  NOP
027F:  BCF    03.5
0280:  BCF    03.6
0281:  BTFSC  28.7
0282:  BSF    0B.7
0283:  DECFSZ 24,F
0284:  GOTO   286
0285:  GOTO   2A5
0286:  BSF    03.6
0287:  RLF    0C,W
0288:  RLF    0E,W
0289:  ANDLW  7F
028A:  BCF    03.6
028B:  MOVWF  25
028C:  BSF    03.6
028D:  MOVF   0D,W
028E:  BCF    03.6
028F:  MOVWF  26
0290:  BSF    03.6
0291:  MOVF   0F,W
0292:  BCF    03.6
0293:  MOVWF  27
0294:  MOVF   25,W
0295:  MOVWF  31
0296:  CALL   223
0297:  MOVF   26,W
0298:  BSF    03.6
0299:  MOVWF  0D
029A:  BCF    03.6
029B:  MOVF   27,W
029C:  BSF    03.6
029D:  MOVWF  0F
029E:  INCF   0D,F
029F:  BTFSC  03.2
02A0:  INCF   0F,F
02A1:  BCF    03.0
02A2:  BCF    03.6
02A3:  DECFSZ 24,F
02A4:  GOTO   24F
02A5:  BCF    0A.3
02A6:  BCF    0A.4
02A7:  GOTO   442 (RETURN)
02A8:  BTFSC  03.1
02A9:  GOTO   2AD
02AA:  MOVLW  39
02AB:  MOVWF  04
02AC:  BCF    03.7
02AD:  CLRF   77
02AE:  CLRF   78
02AF:  CLRF   79
02B0:  CLRF   7A
02B1:  CLRF   39
02B2:  CLRF   3A
02B3:  CLRF   3B
02B4:  CLRF   3C
02B5:  MOVF   38,W
02B6:  IORWF  37,W
02B7:  IORWF  36,W
02B8:  IORWF  35,W
02B9:  BTFSC  03.2
02BA:  GOTO   2EB
02BB:  MOVLW  20
02BC:  MOVWF  3D
02BD:  BCF    03.0
02BE:  RLF    31,F
02BF:  RLF    32,F
02C0:  RLF    33,F
02C1:  RLF    34,F
02C2:  RLF    39,F
02C3:  RLF    3A,F
02C4:  RLF    3B,F
02C5:  RLF    3C,F
02C6:  MOVF   38,W
02C7:  SUBWF  3C,W
02C8:  BTFSS  03.2
02C9:  GOTO   2D4
02CA:  MOVF   37,W
02CB:  SUBWF  3B,W
02CC:  BTFSS  03.2
02CD:  GOTO   2D4
02CE:  MOVF   36,W
02CF:  SUBWF  3A,W
02D0:  BTFSS  03.2
02D1:  GOTO   2D4
02D2:  MOVF   35,W
02D3:  SUBWF  39,W
02D4:  BTFSS  03.0
02D5:  GOTO   2E5
02D6:  MOVF   35,W
02D7:  SUBWF  39,F
02D8:  MOVF   36,W
02D9:  BTFSS  03.0
02DA:  INCFSZ 36,W
02DB:  SUBWF  3A,F
02DC:  MOVF   37,W
02DD:  BTFSS  03.0
02DE:  INCFSZ 37,W
02DF:  SUBWF  3B,F
02E0:  MOVF   38,W
02E1:  BTFSS  03.0
02E2:  INCFSZ 38,W
02E3:  SUBWF  3C,F
02E4:  BSF    03.0
02E5:  RLF    77,F
02E6:  RLF    78,F
02E7:  RLF    79,F
02E8:  RLF    7A,F
02E9:  DECFSZ 3D,F
02EA:  GOTO   2BD
02EB:  MOVF   39,W
02EC:  MOVWF  00
02ED:  INCF   04,F
02EE:  MOVF   3A,W
02EF:  MOVWF  00
02F0:  INCF   04,F
02F1:  MOVF   3B,W
02F2:  MOVWF  00
02F3:  INCF   04,F
02F4:  MOVF   3C,W
02F5:  MOVWF  00
02F6:  RETURN
02F7:  MOVF   04,W
02F8:  MOVWF  29
02F9:  MOVF   28,W
02FA:  MOVWF  2B
02FB:  BTFSC  03.2
02FC:  GOTO   316
02FD:  MOVF   27,W
02FE:  MOVWF  34
02FF:  MOVF   26,W
0300:  MOVWF  33
0301:  MOVF   25,W
0302:  MOVWF  32
0303:  MOVF   24,W
0304:  MOVWF  31
0305:  CLRF   38
0306:  CLRF   37
0307:  MOVLW  20
0308:  MOVWF  36
0309:  MOVLW  82
030A:  MOVWF  35
030B:  CALL   0D0
030C:  MOVF   7A,W
030D:  MOVWF  27
030E:  MOVF   79,W
030F:  MOVWF  26
0310:  MOVF   78,W
0311:  MOVWF  25
0312:  MOVF   77,W
0313:  MOVWF  24
0314:  DECFSZ 2B,F
0315:  GOTO   2FD
0316:  MOVF   27,W
0317:  MOVWF  34
0318:  MOVF   26,W
0319:  MOVWF  33
031A:  MOVF   25,W
031B:  MOVWF  32
031C:  MOVF   24,W
031D:  MOVWF  31
031E:  MOVF   31,W
031F:  SUBLW  B6
0320:  MOVWF  31
0321:  CLRF   7A
0322:  MOVF   32,W
0323:  MOVWF  35
0324:  BSF    32.7
0325:  BCF    03.0
0326:  RRF    32,F
0327:  RRF    33,F
0328:  RRF    34,F
0329:  RRF    7A,F
032A:  RRF    79,F
032B:  RRF    78,F
032C:  RRF    77,F
032D:  DECFSZ 31,F
032E:  GOTO   325
032F:  BTFSS  35.7
0330:  GOTO   33C
0331:  COMF   77,F
0332:  COMF   78,F
0333:  COMF   79,F
0334:  COMF   7A,F
0335:  INCF   77,F
0336:  BTFSC  03.2
0337:  INCF   78,F
0338:  BTFSC  03.2
0339:  INCF   79,F
033A:  BTFSC  03.2
033B:  INCF   7A,F
033C:  MOVF   7A,W
033D:  MOVWF  27
033E:  MOVF   79,W
033F:  MOVWF  26
0340:  MOVF   78,W
0341:  MOVWF  25
0342:  MOVF   77,W
0343:  MOVWF  24
0344:  BTFSS  27.7
0345:  GOTO   353
0346:  DECF   29,F
0347:  BSF    29.5
0348:  COMF   24,F
0349:  COMF   25,F
034A:  COMF   26,F
034B:  COMF   27,F
034C:  INCF   24,F
034D:  BTFSC  03.2
034E:  INCF   25,F
034F:  BTFSC  03.2
0350:  INCF   26,F
0351:  BTFSC  03.2
0352:  INCF   27,F
0353:  MOVLW  3B
0354:  MOVWF  30
0355:  MOVLW  9A
0356:  MOVWF  2F
0357:  MOVLW  CA
0358:  MOVWF  2E
0359:  CLRF   2D
035A:  MOVLW  0A
035B:  MOVWF  2B
035C:  MOVF   28,W
035D:  BTFSC  03.2
035E:  INCF   29,F
035F:  BSF    03.1
0360:  MOVLW  24
0361:  MOVWF  04
0362:  BCF    03.7
0363:  MOVF   27,W
0364:  MOVWF  34
0365:  MOVF   26,W
0366:  MOVWF  33
0367:  MOVF   25,W
0368:  MOVWF  32
0369:  MOVF   24,W
036A:  MOVWF  31
036B:  MOVF   30,W
036C:  MOVWF  38
036D:  MOVF   2F,W
036E:  MOVWF  37
036F:  MOVF   2E,W
0370:  MOVWF  36
0371:  MOVF   2D,W
0372:  MOVWF  35
0373:  CALL   2A8
0374:  MOVF   78,W
0375:  MOVF   77,F
0376:  BTFSS  03.2
0377:  GOTO   38B
0378:  INCF   28,W
0379:  SUBWF  2B,W
037A:  BTFSC  03.2
037B:  GOTO   38B
037C:  MOVF   29,W
037D:  BTFSC  03.2
037E:  GOTO   38D
037F:  ANDLW  0F
0380:  SUBWF  2B,W
0381:  BTFSC  03.2
0382:  GOTO   385
0383:  BTFSC  03.0
0384:  GOTO   3BD
0385:  BTFSC  29.7
0386:  GOTO   3BD
0387:  BTFSC  29.6
0388:  GOTO   38D
0389:  MOVLW  20
038A:  GOTO   3B9
038B:  MOVLW  20
038C:  ANDWF  29,F
038D:  BTFSS  29.5
038E:  GOTO   39B
038F:  BCF    29.5
0390:  MOVF   28,W
0391:  BTFSS  03.2
0392:  DECF   29,F
0393:  MOVF   77,W
0394:  MOVWF  29
0395:  MOVLW  2D
0396:  MOVWF  31
0397:  CALL   223
0398:  MOVF   29,W
0399:  MOVWF  77
039A:  CLRF   29
039B:  MOVF   28,W
039C:  SUBWF  2B,W
039D:  BTFSS  03.2
039E:  GOTO   3A9
039F:  MOVF   77,W
03A0:  MOVWF  29
03A1:  MOVLW  2E
03A2:  MOVWF  31
03A3:  CALL   223
03A4:  MOVF   29,W
03A5:  MOVWF  77
03A6:  MOVLW  20
03A7:  ANDWF  29,F
03A8:  MOVLW  00
03A9:  MOVLW  30
03AA:  BTFSS  29.5
03AB:  GOTO   3B9
03AC:  BCF    29.5
03AD:  MOVF   28,W
03AE:  BTFSS  03.2
03AF:  DECF   29,F
03B0:  MOVF   77,W
03B1:  MOVWF  29
03B2:  MOVLW  2D
03B3:  MOVWF  31
03B4:  CALL   223
03B5:  MOVF   29,W
03B6:  MOVWF  77
03B7:  CLRF   29
03B8:  MOVLW  30
03B9:  ADDWF  77,F
03BA:  MOVF   77,W
03BB:  MOVWF  31
03BC:  CALL   223
03BD:  BCF    03.1
03BE:  MOVF   30,W
03BF:  MOVWF  34
03C0:  MOVF   2F,W
03C1:  MOVWF  33
03C2:  MOVF   2E,W
03C3:  MOVWF  32
03C4:  MOVF   2D,W
03C5:  MOVWF  31
03C6:  CLRF   38
03C7:  CLRF   37
03C8:  CLRF   36
03C9:  MOVLW  0A
03CA:  MOVWF  35
03CB:  CALL   2A8
03CC:  MOVF   7A,W
03CD:  MOVWF  30
03CE:  MOVF   79,W
03CF:  MOVWF  2F
03D0:  MOVF   78,W
03D1:  MOVWF  2E
03D2:  MOVF   77,W
03D3:  MOVWF  2D
03D4:  DECFSZ 2B,F
03D5:  GOTO   35F
03D6:  BCF    0A.3
03D7:  BCF    0A.4
03D8:  GOTO   44F (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(clock=4M, crystal)
*
000C:  MOVLW  32
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
....................   
.................... 
.................... //incluyo esta linea de código
.................... #include <LCD.C>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0039:  MOVLW  0F
003A:  BSF    03.5
003B:  ANDWF  08,W
003C:  IORLW  F0
003D:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003E:  BCF    03.5
003F:  BSF    08.2
....................    delay_cycles(1);
0040:  NOP
....................    lcd_output_enable(1);
0041:  BSF    08.0
....................    delay_cycles(1);
0042:  NOP
....................    high = lcd_read_nibble();
0043:  CALL   02D
0044:  MOVF   78,W
0045:  MOVWF  39
....................       
....................    lcd_output_enable(0);
0046:  BCF    08.0
....................    delay_cycles(1);
0047:  NOP
....................    lcd_output_enable(1);
0048:  BSF    08.0
....................    delay_us(1);
0049:  NOP
....................    low = lcd_read_nibble();
004A:  CALL   02D
004B:  MOVF   78,W
004C:  MOVWF  38
....................       
....................    lcd_output_enable(0);
004D:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  08,W
0051:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0052:  BCF    03.5
0053:  SWAPF  39,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  38,W
0059:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002D:  MOVF   08,W
002E:  MOVWF  77
002F:  SWAPF  08,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif
0032:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0021:  SWAPF  39,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  08,W
0026:  IORWF  77,W
0027:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0028:  NOP
....................    lcd_output_enable(1);
0029:  BSF    08.0
....................    delay_us(2);
002A:  GOTO   02B
....................    lcd_output_enable(0);
002B:  BCF    08.0
002C:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0033:  BSF    03.5
0034:  BCF    08.0
....................    lcd_rs_tris();
0035:  BCF    08.1
....................    lcd_rw_tris();
0036:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0037:  BCF    03.5
0038:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005A:  MOVF   78,W
005B:  MOVWF  38
005C:  BTFSC  38.7
005D:  GOTO   039
....................    lcd_output_rs(address);
005E:  BTFSS  36.0
005F:  BCF    08.1
0060:  BTFSC  36.0
0061:  BSF    08.1
....................    delay_cycles(1);
0062:  NOP
....................    lcd_output_rw(0);
0063:  BCF    08.2
....................    delay_cycles(1);
0064:  NOP
....................    lcd_output_enable(0);
0065:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0066:  SWAPF  37,W
0067:  MOVWF  38
0068:  MOVLW  0F
0069:  ANDWF  38,F
006A:  MOVF   38,W
006B:  MOVWF  39
006C:  CALL   021
....................    lcd_send_nibble(n & 0xf);
006D:  MOVF   37,W
006E:  ANDLW  0F
006F:  MOVWF  38
0070:  MOVWF  39
0071:  CALL   021
0072:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0073:  MOVLW  28
0074:  MOVWF  25
0075:  MOVLW  0C
0076:  MOVWF  26
0077:  MOVLW  01
0078:  MOVWF  27
0079:  MOVLW  06
007A:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007B:  BCF    08.0
....................    lcd_output_rs(0);
007C:  BCF    08.1
....................    lcd_output_rw(0);
007D:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  08,W
0081:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0082:  BCF    08.0
....................    lcd_rs_tris();
0083:  BCF    08.1
....................    lcd_rw_tris();
0084:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0085:  MOVLW  0F
0086:  BCF    03.5
0087:  MOVWF  32
0088:  CALL   00C
....................    for(i=1;i<=3;++i)
0089:  MOVLW  01
008A:  MOVWF  24
008B:  MOVF   24,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    {
....................        lcd_send_nibble(3);
008F:  MOVLW  03
0090:  MOVWF  39
0091:  CALL   021
....................        delay_ms(5);
0092:  MOVLW  05
0093:  MOVWF  32
0094:  CALL   00C
0095:  INCF   24,F
0096:  GOTO   08B
....................    }
....................    
....................    lcd_send_nibble(2);
0097:  MOVLW  02
0098:  MOVWF  39
0099:  CALL   021
....................    delay_ms(5);
009A:  MOVLW  05
009B:  MOVWF  32
009C:  CALL   00C
....................    for(i=0;i<=3;++i)
009D:  CLRF   24
009E:  MOVF   24,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A2:  MOVLW  25
00A3:  ADDWF  24,W
00A4:  MOVWF  04
00A5:  BCF    03.7
00A6:  MOVF   00,W
00A7:  MOVWF  29
00A8:  CLRF   36
00A9:  MOVF   29,W
00AA:  MOVWF  37
00AB:  CALL   033
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AC:  INCF   24,F
00AD:  GOTO   09E
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   3F1 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0211:  DECFSZ 33,W
0212:  GOTO   214
0213:  GOTO   217
....................       address=LCD_LINE_TWO;
0214:  MOVLW  40
0215:  MOVWF  34
0216:  GOTO   218
....................    else
....................       address=0;
0217:  CLRF   34
....................      
....................    address+=x-1;
0218:  MOVLW  01
0219:  SUBWF  32,W
021A:  ADDWF  34,F
....................    lcd_send_byte(0,0x80|address);
021B:  MOVF   34,W
021C:  IORLW  80
021D:  MOVWF  35
021E:  CLRF   36
021F:  MOVF   35,W
0220:  MOVWF  37
0221:  CALL   033
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0222:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0223:  MOVF   31,W
0224:  XORLW  07
0225:  BTFSC  03.2
0226:  GOTO   231
0227:  XORLW  0B
0228:  BTFSC  03.2
0229:  GOTO   236
022A:  XORLW  06
022B:  BTFSC  03.2
022C:  GOTO   23E
022D:  XORLW  02
022E:  BTFSC  03.2
022F:  GOTO   244
0230:  GOTO   249
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0231:  MOVLW  01
0232:  MOVWF  32
0233:  MOVWF  33
0234:  CALL   211
0235:  GOTO   24E
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0236:  CLRF   36
0237:  MOVLW  01
0238:  MOVWF  37
0239:  CALL   033
....................                      delay_ms(2);
023A:  MOVLW  02
023B:  MOVWF  32
023C:  CALL   00C
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
023D:  GOTO   24E
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
023E:  MOVLW  01
023F:  MOVWF  32
0240:  MOVLW  02
0241:  MOVWF  33
0242:  CALL   211
0243:  GOTO   24E
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0244:  CLRF   36
0245:  MOVLW  10
0246:  MOVWF  37
0247:  CALL   033
0248:  GOTO   24E
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0249:  MOVLW  01
024A:  MOVWF  36
024B:  MOVF   31,W
024C:  MOVWF  37
024D:  CALL   033
....................      #endif
....................    }
024E:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... float  x;  //el resultado del convertidor
.................... void main()
*
03D9:  MOVF   03,W
03DA:  ANDLW  1F
03DB:  MOVWF  03
03DC:  BSF    03.5
03DD:  BSF    1F.0
03DE:  BSF    1F.1
03DF:  BSF    1F.2
03E0:  BCF    1F.3
03E1:  MOVLW  07
03E2:  MOVWF  1C
03E3:  BCF    03.7
.................... {
....................    setup_adc_ports(AN0_VREF_VREF);  //En esta linea se configura el ADC
03E4:  BSF    1F.0
03E5:  BSF    1F.1
03E6:  BSF    1F.2
03E7:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL);     //la velociad de conversion
03E8:  BCF    1F.6
03E9:  BCF    03.5
03EA:  BSF    1F.6
03EB:  BSF    1F.7
03EC:  BSF    03.5
03ED:  BSF    1F.7
03EE:  BCF    03.5
03EF:  BSF    1F.0
....................    lcd_init();                      //se configura la pantalla LCD
03F0:  GOTO   073
.................... 
....................    while(TRUE)
....................    {
....................    delay_ms(50);
03F1:  MOVLW  32
03F2:  MOVWF  32
03F3:  CALL   00C
....................    x=read_adc()* 1.0/1023;
03F4:  BSF    1F.2
03F5:  BTFSC  1F.2
03F6:  GOTO   3F5
03F7:  MOVF   1E,W
03F8:  MOVWF  79
03F9:  BSF    03.5
03FA:  MOVF   1E,W
03FB:  MOVWF  78
03FC:  MOVF   79,W
03FD:  BCF    03.5
03FE:  MOVWF  25
03FF:  MOVF   78,W
0400:  MOVWF  24
0401:  MOVF   25,W
0402:  MOVWF  27
0403:  MOVF   78,W
0404:  MOVWF  26
0405:  GOTO   0B1
0406:  MOVF   7A,W
0407:  MOVWF  34
0408:  MOVF   79,W
0409:  MOVWF  33
040A:  MOVF   78,W
040B:  MOVWF  32
040C:  MOVF   77,W
040D:  MOVWF  31
040E:  CLRF   38
040F:  CLRF   37
0410:  CLRF   36
0411:  MOVLW  7F
0412:  MOVWF  35
0413:  CALL   0D0
0414:  MOVF   7A,W
0415:  MOVWF  27
0416:  MOVF   79,W
0417:  MOVWF  26
0418:  MOVF   78,W
0419:  MOVWF  25
041A:  MOVF   77,W
041B:  MOVWF  24
041C:  MOVF   7A,W
041D:  MOVWF  2B
041E:  MOVF   79,W
041F:  MOVWF  2A
0420:  MOVF   78,W
0421:  MOVWF  29
0422:  MOVF   77,W
0423:  MOVWF  28
0424:  CLRF   2F
0425:  MOVLW  C0
0426:  MOVWF  2E
0427:  MOVLW  7F
0428:  MOVWF  2D
0429:  MOVLW  88
042A:  MOVWF  2C
042B:  GOTO   145
042C:  MOVF   7A,W
042D:  MOVWF  23
042E:  MOVF   79,W
042F:  MOVWF  22
0430:  MOVF   78,W
0431:  MOVWF  21
0432:  MOVF   77,W
0433:  MOVWF  20
....................    lcd_gotoxy(1,1);
0434:  MOVLW  01
0435:  MOVWF  32
0436:  MOVWF  33
0437:  CALL   211
....................    printf(LCD_PUTC, " \r voltaje=%f ",x);
0438:  MOVLW  04
0439:  BSF    03.6
043A:  MOVWF  0D
043B:  MOVLW  00
043C:  MOVWF  0F
043D:  BCF    03.0
043E:  MOVLW  0B
043F:  BCF    03.6
0440:  MOVWF  24
0441:  GOTO   24F
0442:  MOVLW  89
0443:  MOVWF  04
0444:  MOVF   23,W
0445:  MOVWF  27
0446:  MOVF   22,W
0447:  MOVWF  26
0448:  MOVF   21,W
0449:  MOVWF  25
044A:  MOVF   20,W
044B:  MOVWF  24
044C:  MOVLW  02
044D:  MOVWF  28
044E:  GOTO   2F7
044F:  MOVLW  20
0450:  MOVWF  31
0451:  CALL   223
0452:  GOTO   3F1
.................... 
.................... 
.................... 
....................       //TODO: User Code
....................    }
.................... 
.................... }
0453:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
